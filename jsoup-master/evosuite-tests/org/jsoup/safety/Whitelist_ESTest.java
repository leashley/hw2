/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 01:28:19 GMT 2020
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "blockquote";
      stringArray0[1] = "blockquote";
      stringArray0[2] = "vE{R|aV75FMiy#7V.+";
      stringArray0[3] = "blockquote";
      stringArray0[4] = "blockquote";
      stringArray0[5] = "blockquote";
      stringArray0[6] = "blockquote";
      stringArray0[7] = "blockquote";
      Whitelist whitelist1 = whitelist0.addProtocols("blockquote", "blockquote", stringArray0);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      Whitelist whitelist2 = Whitelist.simpleText();
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertNotNull(whitelist2);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      
      Whitelist whitelist3 = whitelist1.removeTags(stringArray0);
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertFalse(whitelist3.equals((Object)whitelist2));
      assertNotNull(whitelist3);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertNotSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist3, whitelist2);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist3, whitelist1);
      
      Whitelist whitelist4 = Whitelist.basic();
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertNotNull(whitelist4);
      assertNotSame(whitelist4, whitelist1);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist3);
      assertNotSame(whitelist4, whitelist0);
      
      Whitelist whitelist5 = whitelist4.preserveRelativeLinks(false);
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertFalse(whitelist5.equals((Object)whitelist2));
      assertFalse(whitelist5.equals((Object)whitelist0));
      assertFalse(whitelist5.equals((Object)whitelist3));
      assertFalse(whitelist5.equals((Object)whitelist1));
      assertNotNull(whitelist5);
      assertNotSame(whitelist4, whitelist1);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist3);
      assertSame(whitelist4, whitelist5);
      assertNotSame(whitelist4, whitelist0);
      assertNotSame(whitelist5, whitelist2);
      assertNotSame(whitelist5, whitelist0);
      assertNotSame(whitelist5, whitelist3);
      assertNotSame(whitelist5, whitelist1);
      assertSame(whitelist5, whitelist4);
      
      Whitelist whitelist6 = whitelist2.removeTags(stringArray0);
      assertFalse(whitelist2.equals((Object)whitelist5));
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertFalse(whitelist2.equals((Object)whitelist3));
      assertFalse(whitelist2.equals((Object)whitelist4));
      assertFalse(whitelist6.equals((Object)whitelist0));
      assertFalse(whitelist6.equals((Object)whitelist5));
      assertFalse(whitelist6.equals((Object)whitelist4));
      assertFalse(whitelist6.equals((Object)whitelist1));
      assertFalse(whitelist6.equals((Object)whitelist3));
      assertNotNull(whitelist6);
      assertSame(whitelist2, whitelist6);
      assertNotSame(whitelist2, whitelist5);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      assertNotSame(whitelist2, whitelist3);
      assertNotSame(whitelist2, whitelist4);
      assertNotSame(whitelist6, whitelist0);
      assertNotSame(whitelist6, whitelist5);
      assertSame(whitelist6, whitelist2);
      assertNotSame(whitelist6, whitelist4);
      assertNotSame(whitelist6, whitelist1);
      assertNotSame(whitelist6, whitelist3);
      
      Whitelist whitelist7 = Whitelist.basic();
      assertFalse(whitelist7.equals((Object)whitelist4));
      assertFalse(whitelist7.equals((Object)whitelist6));
      assertFalse(whitelist7.equals((Object)whitelist3));
      assertFalse(whitelist7.equals((Object)whitelist1));
      assertFalse(whitelist7.equals((Object)whitelist0));
      assertFalse(whitelist7.equals((Object)whitelist5));
      assertFalse(whitelist7.equals((Object)whitelist2));
      assertNotNull(whitelist7);
      assertNotSame(whitelist7, whitelist4);
      assertNotSame(whitelist7, whitelist6);
      assertNotSame(whitelist7, whitelist3);
      assertNotSame(whitelist7, whitelist1);
      assertNotSame(whitelist7, whitelist0);
      assertNotSame(whitelist7, whitelist5);
      assertNotSame(whitelist7, whitelist2);
      
      Whitelist whitelist8 = whitelist1.removeEnforcedAttribute("blockquote", "dir");
      assertFalse(whitelist0.equals((Object)whitelist6));
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist7));
      assertFalse(whitelist0.equals((Object)whitelist5));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist8.equals((Object)whitelist7));
      assertFalse(whitelist8.equals((Object)whitelist6));
      assertFalse(whitelist8.equals((Object)whitelist4));
      assertFalse(whitelist8.equals((Object)whitelist5));
      assertFalse(whitelist8.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist5));
      assertFalse(whitelist1.equals((Object)whitelist7));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist6));
      assertFalse(whitelist1.equals((Object)whitelist4));
      assertNotNull(whitelist8);
      assertNotSame(whitelist0, whitelist4);
      assertNotSame(whitelist0, whitelist6);
      assertNotSame(whitelist0, whitelist7);
      assertSame(whitelist0, whitelist8);
      assertSame(whitelist0, whitelist1);
      assertNotSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertNotSame(whitelist8, whitelist7);
      assertSame(whitelist8, whitelist0);
      assertNotSame(whitelist8, whitelist4);
      assertNotSame(whitelist8, whitelist6);
      assertNotSame(whitelist8, whitelist5);
      assertNotSame(whitelist8, whitelist2);
      assertSame(whitelist8, whitelist1);
      assertSame(whitelist8, whitelist3);
      assertSame(whitelist1, whitelist8);
      assertNotSame(whitelist1, whitelist5);
      assertNotSame(whitelist1, whitelist7);
      assertNotSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertNotSame(whitelist1, whitelist6);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist1, whitelist4);
      
      Attributes attributes0 = whitelist8.getEnforcedAttributes("blockquote");
      assertFalse(whitelist0.equals((Object)whitelist6));
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist7));
      assertFalse(whitelist0.equals((Object)whitelist5));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist8.equals((Object)whitelist7));
      assertFalse(whitelist8.equals((Object)whitelist6));
      assertFalse(whitelist8.equals((Object)whitelist4));
      assertFalse(whitelist8.equals((Object)whitelist5));
      assertFalse(whitelist8.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist5));
      assertFalse(whitelist1.equals((Object)whitelist7));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist6));
      assertFalse(whitelist1.equals((Object)whitelist4));
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertNotSame(whitelist0, whitelist4);
      assertNotSame(whitelist0, whitelist6);
      assertNotSame(whitelist0, whitelist7);
      assertSame(whitelist0, whitelist8);
      assertSame(whitelist0, whitelist1);
      assertNotSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertNotSame(whitelist8, whitelist7);
      assertSame(whitelist8, whitelist0);
      assertNotSame(whitelist8, whitelist4);
      assertNotSame(whitelist8, whitelist6);
      assertNotSame(whitelist8, whitelist5);
      assertNotSame(whitelist8, whitelist2);
      assertSame(whitelist8, whitelist1);
      assertSame(whitelist8, whitelist3);
      assertSame(whitelist1, whitelist8);
      assertNotSame(whitelist1, whitelist5);
      assertNotSame(whitelist1, whitelist7);
      assertNotSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertNotSame(whitelist1, whitelist6);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist1, whitelist4);
      
      Whitelist whitelist9 = whitelist8.removeEnforcedAttribute("blockquote", "Split offset must be not be negative");
      assertFalse(whitelist0.equals((Object)whitelist6));
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist7));
      assertFalse(whitelist0.equals((Object)whitelist5));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist8.equals((Object)whitelist7));
      assertFalse(whitelist8.equals((Object)whitelist6));
      assertFalse(whitelist8.equals((Object)whitelist4));
      assertFalse(whitelist8.equals((Object)whitelist5));
      assertFalse(whitelist8.equals((Object)whitelist2));
      assertFalse(whitelist9.equals((Object)whitelist5));
      assertFalse(whitelist9.equals((Object)whitelist4));
      assertFalse(whitelist9.equals((Object)whitelist6));
      assertFalse(whitelist9.equals((Object)whitelist7));
      assertFalse(whitelist9.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist5));
      assertFalse(whitelist1.equals((Object)whitelist7));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist6));
      assertFalse(whitelist1.equals((Object)whitelist4));
      assertNotNull(whitelist9);
      assertNotSame(whitelist0, whitelist4);
      assertNotSame(whitelist0, whitelist6);
      assertSame(whitelist0, whitelist9);
      assertNotSame(whitelist0, whitelist7);
      assertSame(whitelist0, whitelist8);
      assertSame(whitelist0, whitelist1);
      assertNotSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertNotSame(whitelist8, whitelist7);
      assertSame(whitelist8, whitelist0);
      assertSame(whitelist8, whitelist9);
      assertNotSame(whitelist8, whitelist4);
      assertNotSame(whitelist8, whitelist6);
      assertNotSame(whitelist8, whitelist5);
      assertNotSame(whitelist8, whitelist2);
      assertSame(whitelist8, whitelist1);
      assertSame(whitelist8, whitelist3);
      assertSame(whitelist9, whitelist8);
      assertSame(whitelist9, whitelist1);
      assertNotSame(whitelist9, whitelist5);
      assertSame(whitelist9, whitelist3);
      assertNotSame(whitelist9, whitelist4);
      assertNotSame(whitelist9, whitelist6);
      assertNotSame(whitelist9, whitelist7);
      assertNotSame(whitelist9, whitelist2);
      assertSame(whitelist9, whitelist0);
      assertSame(whitelist1, whitelist8);
      assertNotSame(whitelist1, whitelist5);
      assertNotSame(whitelist1, whitelist7);
      assertNotSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertNotSame(whitelist1, whitelist6);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist1, whitelist4);
      assertSame(whitelist1, whitelist9);
      
      Whitelist whitelist10 = whitelist8.removeAttributes("blockquote", stringArray0);
      assertFalse(whitelist0.equals((Object)whitelist6));
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist7));
      assertFalse(whitelist0.equals((Object)whitelist5));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist8.equals((Object)whitelist7));
      assertFalse(whitelist8.equals((Object)whitelist6));
      assertFalse(whitelist8.equals((Object)whitelist4));
      assertFalse(whitelist8.equals((Object)whitelist5));
      assertFalse(whitelist8.equals((Object)whitelist2));
      assertFalse(whitelist10.equals((Object)whitelist4));
      assertFalse(whitelist10.equals((Object)whitelist5));
      assertFalse(whitelist10.equals((Object)whitelist7));
      assertFalse(whitelist10.equals((Object)whitelist2));
      assertFalse(whitelist10.equals((Object)whitelist6));
      assertFalse(whitelist1.equals((Object)whitelist5));
      assertFalse(whitelist1.equals((Object)whitelist7));
      assertFalse(whitelist1.equals((Object)whitelist2));
      assertFalse(whitelist1.equals((Object)whitelist6));
      assertFalse(whitelist1.equals((Object)whitelist4));
      assertNotNull(whitelist10);
      assertSame(whitelist0, whitelist10);
      assertNotSame(whitelist0, whitelist4);
      assertNotSame(whitelist0, whitelist6);
      assertSame(whitelist0, whitelist9);
      assertNotSame(whitelist0, whitelist7);
      assertSame(whitelist0, whitelist8);
      assertSame(whitelist0, whitelist1);
      assertNotSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertNotSame(whitelist8, whitelist7);
      assertSame(whitelist8, whitelist10);
      assertSame(whitelist8, whitelist0);
      assertSame(whitelist8, whitelist9);
      assertNotSame(whitelist8, whitelist4);
      assertNotSame(whitelist8, whitelist6);
      assertNotSame(whitelist8, whitelist5);
      assertNotSame(whitelist8, whitelist2);
      assertSame(whitelist8, whitelist1);
      assertSame(whitelist8, whitelist3);
      assertSame(whitelist10, whitelist9);
      assertNotSame(whitelist10, whitelist4);
      assertSame(whitelist10, whitelist8);
      assertNotSame(whitelist10, whitelist5);
      assertNotSame(whitelist10, whitelist7);
      assertSame(whitelist10, whitelist1);
      assertSame(whitelist10, whitelist3);
      assertNotSame(whitelist10, whitelist2);
      assertSame(whitelist10, whitelist0);
      assertNotSame(whitelist10, whitelist6);
      assertSame(whitelist1, whitelist8);
      assertNotSame(whitelist1, whitelist5);
      assertNotSame(whitelist1, whitelist7);
      assertSame(whitelist1, whitelist10);
      assertNotSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertNotSame(whitelist1, whitelist6);
      assertSame(whitelist1, whitelist3);
      assertNotSame(whitelist1, whitelist4);
      assertSame(whitelist1, whitelist9);
      
      Whitelist whitelist11 = whitelist0.removeAttributes("blockquote", stringArray0);
      assertFalse(whitelist0.equals((Object)whitelist6));
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist7));
      assertFalse(whitelist0.equals((Object)whitelist5));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(whitelist11.equals((Object)whitelist5));
      assertFalse(whitelist11.equals((Object)whitelist7));
      assertFalse(whitelist11.equals((Object)whitelist4));
      assertFalse(whitelist11.equals((Object)whitelist2));
      assertFalse(whitelist11.equals((Object)whitelist6));
      assertNotNull(whitelist11);
      assertSame(whitelist0, whitelist10);
      assertNotSame(whitelist0, whitelist4);
      assertNotSame(whitelist0, whitelist6);
      assertSame(whitelist0, whitelist9);
      assertNotSame(whitelist0, whitelist7);
      assertSame(whitelist0, whitelist8);
      assertSame(whitelist0, whitelist1);
      assertNotSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist11);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist11, whitelist10);
      assertSame(whitelist11, whitelist9);
      assertSame(whitelist11, whitelist3);
      assertNotSame(whitelist11, whitelist5);
      assertNotSame(whitelist11, whitelist7);
      assertNotSame(whitelist11, whitelist4);
      assertSame(whitelist11, whitelist8);
      assertNotSame(whitelist11, whitelist2);
      assertSame(whitelist11, whitelist1);
      assertSame(whitelist11, whitelist0);
      assertNotSame(whitelist11, whitelist6);
      
      Whitelist whitelist12 = whitelist5.addAttributes("blockquote", stringArray0);
      assertFalse(whitelist12.equals((Object)whitelist3));
      assertFalse(whitelist12.equals((Object)whitelist7));
      assertFalse(whitelist12.equals((Object)whitelist6));
      assertFalse(whitelist12.equals((Object)whitelist1));
      assertFalse(whitelist12.equals((Object)whitelist10));
      assertFalse(whitelist12.equals((Object)whitelist0));
      assertFalse(whitelist12.equals((Object)whitelist9));
      assertFalse(whitelist12.equals((Object)whitelist8));
      assertFalse(whitelist12.equals((Object)whitelist11));
      assertFalse(whitelist12.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist8));
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertFalse(whitelist4.equals((Object)whitelist6));
      assertFalse(whitelist4.equals((Object)whitelist11));
      assertFalse(whitelist4.equals((Object)whitelist7));
      assertFalse(whitelist4.equals((Object)whitelist10));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist9));
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertFalse(whitelist5.equals((Object)whitelist10));
      assertFalse(whitelist5.equals((Object)whitelist9));
      assertFalse(whitelist5.equals((Object)whitelist2));
      assertFalse(whitelist5.equals((Object)whitelist7));
      assertFalse(whitelist5.equals((Object)whitelist11));
      assertFalse(whitelist5.equals((Object)whitelist8));
      assertFalse(whitelist5.equals((Object)whitelist6));
      assertFalse(whitelist5.equals((Object)whitelist0));
      assertFalse(whitelist5.equals((Object)whitelist3));
      assertFalse(whitelist5.equals((Object)whitelist1));
      assertNotNull(whitelist12);
      assertNotSame(whitelist12, whitelist3);
      assertNotSame(whitelist12, whitelist7);
      assertNotSame(whitelist12, whitelist6);
      assertNotSame(whitelist12, whitelist1);
      assertSame(whitelist12, whitelist5);
      assertNotSame(whitelist12, whitelist10);
      assertNotSame(whitelist12, whitelist0);
      assertSame(whitelist12, whitelist4);
      assertNotSame(whitelist12, whitelist9);
      assertNotSame(whitelist12, whitelist11);
      assertNotSame(whitelist12, whitelist8);
      assertNotSame(whitelist12, whitelist2);
      assertNotSame(whitelist4, whitelist8);
      assertNotSame(whitelist4, whitelist1);
      assertNotSame(whitelist4, whitelist11);
      assertNotSame(whitelist4, whitelist6);
      assertNotSame(whitelist4, whitelist7);
      assertNotSame(whitelist4, whitelist10);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist9);
      assertNotSame(whitelist4, whitelist3);
      assertSame(whitelist4, whitelist5);
      assertSame(whitelist4, whitelist12);
      assertNotSame(whitelist4, whitelist0);
      assertNotSame(whitelist5, whitelist10);
      assertNotSame(whitelist5, whitelist9);
      assertNotSame(whitelist5, whitelist2);
      assertNotSame(whitelist5, whitelist7);
      assertSame(whitelist5, whitelist12);
      assertNotSame(whitelist5, whitelist11);
      assertNotSame(whitelist5, whitelist8);
      assertNotSame(whitelist5, whitelist6);
      assertNotSame(whitelist5, whitelist0);
      assertNotSame(whitelist5, whitelist3);
      assertSame(whitelist5, whitelist4);
      assertNotSame(whitelist5, whitelist1);
      
      Attributes attributes1 = whitelist0.getEnforcedAttributes("blockquote");
      assertFalse(whitelist0.equals((Object)whitelist4));
      assertFalse(whitelist0.equals((Object)whitelist6));
      assertFalse(whitelist0.equals((Object)whitelist12));
      assertFalse(whitelist0.equals((Object)whitelist7));
      assertFalse(whitelist0.equals((Object)whitelist5));
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertNotSame(whitelist0, whitelist4);
      assertSame(whitelist0, whitelist10);
      assertNotSame(whitelist0, whitelist6);
      assertNotSame(whitelist0, whitelist12);
      assertSame(whitelist0, whitelist9);
      assertNotSame(whitelist0, whitelist7);
      assertSame(whitelist0, whitelist8);
      assertSame(whitelist0, whitelist1);
      assertNotSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist11);
      assertSame(whitelist0, whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertNotSame(attributes1, attributes0);
      
      // Undeclared exception!
      try { 
        whitelist4.removeProtocols((String) null, "blockquote", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      stringArray0[4] = "a";
      stringArray0[5] = "a";
      stringArray0[6] = "a";
      stringArray0[7] = "a";
      Whitelist whitelist1 = whitelist0.removeAttributes("a", stringArray0);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      Element element0 = new Element("a");
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("a", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("a", element0.tagName());
      assertNotNull(element0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = Attribute.createFromEncoded("um.2::", "m 0mTSSEKZq'Op3");
      assertEquals("um.2::", attribute0.getKey());
      assertEquals("m 0mTSSEKZq'Op3", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertEquals(1, attributes0.size());
      assertEquals("um.2::", attribute0.getKey());
      assertEquals("m 0mTSSEKZq'Op3", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("a", "a");
      assertEquals(2, attributes0.size());
      assertEquals("um.2::", attribute0.getKey());
      assertEquals("m 0mTSSEKZq'Op3", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Attribute attribute1 = new Attribute("m 0mTSSEKZq'Op3", "a", attributes2);
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals("a", attribute1.getValue());
      assertEquals("m 0mTSSEKZq'Op3", attribute1.getKey());
      assertEquals(2, attributes0.size());
      assertEquals("um.2::", attribute0.getKey());
      assertEquals("m 0mTSSEKZq'Op3", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotNull(attribute1);
      
      boolean boolean0 = whitelist0.isSafeAttribute("fieldset", element0, attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(attribute0.equals((Object)attribute1));
      assertFalse(boolean0);
      assertEquals("a", attribute1.getValue());
      assertEquals("m 0mTSSEKZq'Op3", attribute1.getKey());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("a", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("a", element0.tagName());
      assertEquals(2, attributes0.size());
      assertEquals("um.2::", attribute0.getKey());
      assertEquals("m 0mTSSEKZq'Op3", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertNotSame(attribute1, attribute0);
      assertSame(whitelist0, whitelist1);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attribute0, attribute1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("small");
      assertEquals("small", whitelist_TagName0.toString());
      assertNotNull(whitelist_TagName0);
      
      Whitelist whitelist0 = Whitelist.basicWithImages();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("small", "small");
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      // Undeclared exception!
      try { 
        whitelist1.addEnforcedAttribute("", "", "ogf&]'8Y4w10A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("Dfs1Ips[", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("4+,^deh{/[Md3}");
      assertEquals("4+,^deh{/[Md3}", whitelist_Protocol0.toString());
      assertNotNull(whitelist_Protocol0);
      
      Whitelist whitelist0 = Whitelist.relaxed();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("4+,^deh{/[Md3}", "4+,^deh{/[Md3}", "4+,^deh{/[Md3}");
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "thead";
      Whitelist whitelist2 = whitelist1.removeAttributes("thead", stringArray0);
      assertNotNull(whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist0);
      
      Whitelist whitelist3 = whitelist2.preserveRelativeLinks(true);
      assertNotNull(whitelist3);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist1, whitelist3);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist3);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist3, whitelist1);
      assertSame(whitelist3, whitelist2);
      assertSame(whitelist3, whitelist0);
      
      Whitelist whitelist4 = whitelist3.addTags(stringArray0);
      assertNotNull(whitelist4);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist4);
      assertSame(whitelist1, whitelist3);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist4);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist3);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist4);
      assertSame(whitelist3, whitelist1);
      assertSame(whitelist3, whitelist2);
      assertSame(whitelist3, whitelist4);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist4, whitelist2);
      assertSame(whitelist4, whitelist1);
      assertSame(whitelist4, whitelist3);
      assertSame(whitelist4, whitelist0);
      
      Whitelist whitelist5 = whitelist4.removeTags(stringArray0);
      assertNotNull(whitelist5);
      assertSame(whitelist0, whitelist3);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist5);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist4);
      assertSame(whitelist1, whitelist5);
      assertSame(whitelist1, whitelist3);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist4);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist2, whitelist5);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist3);
      assertSame(whitelist2, whitelist0);
      assertSame(whitelist2, whitelist4);
      assertSame(whitelist3, whitelist1);
      assertSame(whitelist3, whitelist5);
      assertSame(whitelist3, whitelist2);
      assertSame(whitelist3, whitelist4);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist4, whitelist2);
      assertSame(whitelist4, whitelist1);
      assertSame(whitelist4, whitelist3);
      assertSame(whitelist4, whitelist5);
      assertSame(whitelist4, whitelist0);
      assertSame(whitelist5, whitelist0);
      assertSame(whitelist5, whitelist4);
      assertSame(whitelist5, whitelist1);
      assertSame(whitelist5, whitelist2);
      assertSame(whitelist5, whitelist3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("REMOVE");
      assertEquals("REMOVE", whitelist_TagName0.toString());
      assertNotNull(whitelist_TagName0);
      
      Whitelist whitelist0 = new Whitelist();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("REMOVE", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("sZ-%}:&l~@5&A*U%-G9", ")aRP+t`", "sZ-%}:&l~@5&A*U%-G9");
      assertNotNull(whitelist2);
      assertSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist2);
      assertSame(whitelist1, whitelist0);
      assertSame(whitelist2, whitelist1);
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      assertNotNull(whitelist0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c";
      stringArray0[1] = "c";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      assertNotNull(whitelist1);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist1, whitelist0);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Whitelist whitelist2 = Whitelist.basic();
      assertFalse(whitelist2.equals((Object)whitelist1));
      assertFalse(whitelist2.equals((Object)whitelist0));
      assertNotNull(whitelist2);
      assertNotSame(whitelist2, whitelist1);
      assertNotSame(whitelist2, whitelist0);
      
      boolean boolean0 = whitelist0.isSafeTag("c");
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertTrue(boolean0);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      
      stringArray1[0] = "c";
      stringArray1[1] = "c";
      Whitelist whitelist3 = whitelist0.addProtocols("c", "c", stringArray1);
      assertFalse(whitelist0.equals((Object)whitelist2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(whitelist3.equals((Object)whitelist2));
      assertNotNull(whitelist3);
      assertNotSame(whitelist0, whitelist2);
      assertSame(whitelist0, whitelist1);
      assertSame(whitelist0, whitelist3);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(whitelist3, whitelist2);
      assertSame(whitelist3, whitelist0);
      assertSame(whitelist3, whitelist1);
      
      Whitelist whitelist4 = Whitelist.none();
      assertFalse(whitelist4.equals((Object)whitelist3));
      assertFalse(whitelist4.equals((Object)whitelist2));
      assertFalse(whitelist4.equals((Object)whitelist0));
      assertFalse(whitelist4.equals((Object)whitelist1));
      assertNotNull(whitelist4);
      assertNotSame(whitelist4, whitelist3);
      assertNotSame(whitelist4, whitelist2);
      assertNotSame(whitelist4, whitelist0);
      assertNotSame(whitelist4, whitelist1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("");
      assertEquals("", whitelist_Protocol0.toString());
      assertNotNull(whitelist_Protocol0);
      
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = Whitelist.none();
      assertFalse(whitelist1.equals((Object)whitelist0));
      assertNotNull(whitelist1);
      assertNotSame(whitelist1, whitelist0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9-";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("9-", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("var");
      assertEquals("var", whitelist_AttributeValue0.toString());
      assertNotNull(whitelist_AttributeValue0);
      
      Whitelist.AttributeValue whitelist_AttributeValue1 = Whitelist.AttributeValue.valueOf("var");
      assertTrue(whitelist_AttributeValue1.equals((Object)whitelist_AttributeValue0));
      assertEquals("var", whitelist_AttributeValue1.toString());
      assertNotNull(whitelist_AttributeValue1);
      assertNotSame(whitelist_AttributeValue1, whitelist_AttributeValue0);
      
      boolean boolean0 = whitelist_AttributeValue0.equals("var");
      assertTrue(whitelist_AttributeValue0.equals((Object)whitelist_AttributeValue1));
      assertFalse(boolean0);
      assertEquals("var", whitelist_AttributeValue0.toString());
      assertNotSame(whitelist_AttributeValue0, whitelist_AttributeValue1);
      
      boolean boolean1 = whitelist_AttributeValue0.equals("var");
      assertTrue(whitelist_AttributeValue0.equals((Object)whitelist_AttributeValue1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("var", whitelist_AttributeValue0.toString());
      assertNotSame(whitelist_AttributeValue0, whitelist_AttributeValue1);
      
      Whitelist whitelist0 = Whitelist.basic();
      assertNotNull(whitelist0);
      
      Whitelist whitelist1 = Whitelist.none();
      assertFalse(whitelist1.equals((Object)whitelist0));
      assertNotNull(whitelist1);
      assertNotSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      assertNotNull(whitelist0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String string0 = null;
      String string1 = "[`u[Z22V>G";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        whitelist0.addProtocols((String) null, "[`u[Z22V>G", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("j(=3R7?E^M");
      String string0 = "7jj{y:S(paRbJ<l3ac5";
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("7jj{y:S(paRbJ<l3ac5");
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String string1 = "";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<|6ed|";
      stringArray0[1] = "basefont";
      stringArray0[2] = "h0Uk|W!ahtzq.1D";
      stringArray0[3] = "Split offset must be not be negative";
      stringArray0[4] = ":empty";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes("HsC7B&< ~<n6@+-_~z", stringArray0);
      whitelist2.removeEnforcedAttribute("HsC7B&< ~<n6@+-_~z", "<|6ed|");
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("Split offset must be not be negative", "itemscope", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      boolean boolean0 = true;
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "br";
      stringArray0[1] = "br";
      stringArray0[2] = "br";
      stringArray0[3] = "br";
      stringArray0[4] = "br";
      stringArray0[5] = "br";
      stringArray0[6] = "br";
      stringArray0[7] = "br";
      whitelist1.addProtocols("br", "br", stringArray0);
      Whitelist.simpleText();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "code";
      stringArray1[1] = "code";
      String string0 = "@=g;_QtHL";
      stringArray1[2] = "@=g;_QtHL";
      stringArray1[3] = "code";
      whitelist1.removeAttributes("code", stringArray1);
      whitelist0.getEnforcedAttributes("eH}xD ");
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.isSafeTag("hR&bio");
      whitelist0.isSafeTag("small");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "id";
      stringArray0[1] = "hR&bio";
      stringArray0[2] = "id";
      stringArray0[3] = "id";
      stringArray0[4] = "id";
      stringArray0[5] = "id";
      stringArray0[6] = "hR&bio";
      stringArray0[7] = "hR&bio";
      stringArray0[8] = "hR&bio";
      whitelist0.addTags(stringArray0);
      Whitelist.simpleText();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "8|:%RMum^cub=DE";
      stringArray1[1] = "!^p3!'H00}tg }";
      stringArray1[2] = "!^p3!'H00}tg }";
      stringArray1[3] = "id";
      Whitelist whitelist1 = whitelist0.addProtocols("id", "!^p3!'H00}tg }", stringArray1);
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("Cannot remove a protocol that is not set.");
      whitelist0.removeEnforcedAttribute("8|:%RMum^cub=DE", "Cannot remove a protocol that is not set.");
      whitelist1.removeTags(stringArray0);
      whitelist1.removeEnforcedAttribute("id", "vkEp");
      whitelist_AttributeKey0.toString();
      Whitelist.none();
      Whitelist whitelist2 = Whitelist.simpleText();
      Document document0 = Document.createShell("id");
      Element element0 = document0.body();
      Attribute attribute0 = Attribute.createFromEncoded("hR&bio", "");
      Attribute attribute1 = attribute0.clone();
      whitelist2.isSafeAttribute("tLC'M+z*Io|W?TY", element0, attribute1);
  }
}
