/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 11 22:36:28 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("/vi5`7;/26RqBE");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      assertEquals("\n<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      formElement0.outerHtmlHead(outputStreamWriter0, 98688, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("/vi5`7;/26RqBE");
      document0.title("/vi5`7;/26RqBE");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
      assertEquals("\n<html>\n <head>\n  <title>/vi5`7;/26RqBE</title>\n </head>\n <body></body>\n</html>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlHead(outputStreamWriter0, 98688, document_OutputSettings0);
      assertEquals("br", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("|i");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      String string0 = document0.html();
      assertEquals("|i", document0.baseUri());
      assertEquals("<html><head></head><body></body></html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.createElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("V!VE{!", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "V!VE{!", attributes0);
      pseudoTextElement0.val();
      assertEquals("V!VE{!", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":eq(%d)");
      Element element0 = new Element(tag0, ":eq(%d)");
      Element element1 = element0.toggleClass(":eq(%d)");
      element0.toggleClass("&H%a");
      boolean boolean0 = element1.hasClass("&H%a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":eq(%d)");
      Element element0 = new Element(tag0, ":eq(%d)");
      Element element1 = element0.toggleClass(":eq(%d)");
      element0.toggleClass("Q:eq(%d)E");
      element1.hasClass("&H%a");
      assertEquals(":eq(%d)", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("V!VE{!", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "V!VE{!", attributes0);
      pseudoTextElement0.toggleClass("i^x[gI,dCJ");
      boolean boolean0 = pseudoTextElement0.hasClass("Unexpected character '%s' in input state [%s]");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.text("org.jsoup.nodes.Element$NodeList");
      document0.data();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.text("org.jsoup.nodes.Element$NodeList");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("|uJakzE.,A8", "|uJakzE.,A8", "|uJakzE.,A8", "org.jsoup.parser.TokeniserState$30", "|uJakzE.,A8");
      boolean boolean0 = Element.preserveWhitespace(documentType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("details");
      document0.title("details");
      Elements elements0 = document0.getElementsMatchingOwnText("details");
      assertEquals(1, document0.childNodeSize());
      assertEquals("details", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      document0.title("y*Df{1vI2a*ms");
      document0.appendText("N 2|jiXi");
      document0.getElementsMatchingText("5t9Pdg_>");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.getElementById(".");
      assertEquals(1, document0.childNodeSize());
      assertEquals(".", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals(".", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":eq(%d)");
      Element element0 = new Element(tag0, ":eq(%d)");
      element0.setParentNode(element0);
      element0.lastElementSibling();
      assertEquals(":eq(%d)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":eq(%d)");
      Element element0 = new Element(tag0, ":eq(%d)");
      element0.setParentNode(element0);
      element0.firstElementSibling();
      assertEquals(":eq(%d)", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals(".", element1.baseUri());
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("1");
      document0.previousElementSibling();
      assertEquals("1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.head();
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
      assertEquals(".", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("g>^2Si#+");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals("g>^2Si#+", element1.baseUri());
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals(".", element0.baseUri());
      assertNull(element1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      Element element0 = new Element(tag0, ":#lRA(&y^5*FJ/AR$g");
      element0.siblingElements();
      assertEquals(":#lRA(&y^5*FJ/AR$g", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("drKeW-F);");
      Element element0 = document0.appendElement("`wb");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("g>^2Si#+");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("g>^2Si#+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("title");
      Element element0 = document0.toggleClass("title");
      element0.cssSelector();
      assertEquals("title", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("Q)mp%[6");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(675, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<*RDYHwybxMC:4fW87");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "<*RDYHwybxMC:4fW87", attributes0);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        element0.insertChildren((-1920), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Element element0 = new Element("zu\u0005Hz' 9jJ\"13\";");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Element element0 = new Element("L");
      Pattern pattern0 = Pattern.compile("D1cD^cOZz/x@");
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("zH 6`A5rrA=");
      Elements elements0 = document0.getElementsByIndexEquals(32);
      // Undeclared exception!
      try { 
        document0.insertChildren((-369), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("font");
      document0.prepend(".]");
      document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("details");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("details", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      document0.html(" > ");
      Elements elements0 = document0.children();
      assertEquals(1, document0.childNodeSize());
      assertEquals("5t9Pdg_>", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("Jf/");
      Element element0 = document0.body();
      Element element1 = element0.after("");
      assertEquals(1, element1.siblingIndex());
      assertEquals("Jf/", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      Element element0 = document0.createElement("0V$d}HH=Q06b9Mf");
      Element element1 = element0.val("5t9Pdg_>");
      Element element2 = document0.appendTo(element1);
      element2.html(" > ");
      assertEquals(1, element1.childNodeSize());
      
      document0.getElementsMatchingText("5t9Pdg_>");
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("E0uW/`FYnYeI");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2172);
      assertEquals("E0uW/`FYnYeI", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", attributes0);
      // Undeclared exception!
      try { 
        formElement0.selectFirst("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&': unexpected token at '=12;1&gt=1q;3&lt=1o;2&quot=y;0&'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("wpJ-IxWkIvND#Ye");
      // Undeclared exception!
      try { 
        document0.is("M(_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'M(_': unexpected token at '(_'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document("1");
      document0.getAllElements();
      assertEquals("1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element");
      Element element1 = element0.removeClass("/'&%O=UG,1t-\"\"wC`x");
      assertEquals("org.jsoup.nodes.Element", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("details");
      // Undeclared exception!
      try { 
        document0.before("details");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = new Document("font");
      document0.getElementsByAttribute("font");
      assertEquals("font", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("zH 6`A5rrA=");
      String string0 = document0.toString();
      assertEquals("zH 6`A5rrA=", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.getElementsByAttributeValueNot("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertEquals("br", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      Element element0 = document0.shallowClone();
      assertEquals("5t9Pdg_>", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document("_fc&");
      Document document1 = document0.clone();
      assertEquals("_fc&", document1.baseUri());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("6)86x'v-");
      document0.doSetBaseUri("6)86x'v-");
      assertEquals("6)86x'v-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document("#");
      document0.getElementsByAttributeValueContaining("~Icz", "~Icz");
      assertEquals("#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ScriptDataDoubleEscapeEnd");
      Element element0 = new Element(tag0, "ScriptDataDoubleEscapeEnd");
      Elements elements0 = element0.getElementsContainingText("#");
      // Undeclared exception!
      try { 
        element0.insertChildren(30, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByClass("$F@nJV!:");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("E0uW/`FYnYeI");
      document0.getElementsByAttributeValueEnding("command", "org.jsoup.parser.TokeniserState$8");
      assertEquals(1, document0.childNodeSize());
      assertEquals("E0uW/`FYnYeI", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[fuPHASP-yzW");
      Element element0 = new Element(tag0, "ins");
      Evaluator.Id evaluator_Id0 = new Evaluator.Id((String) null);
      // Undeclared exception!
      try { 
        element0.is((Evaluator) evaluator_Id0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Id", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("drKeW-F);");
      document0.getElementsByAttributeValueMatching("disabled", "disabled");
      assertEquals(1, document0.childNodeSize());
      assertEquals("drKeW-F);", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      Document document1 = (Document)document0.val("5t9Pdg_>");
      Document document2 = (Document)document1.doClone(document0);
      assertTrue(document2.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("5t9Pdg_>", document2.baseUri());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", attributes0);
      // Undeclared exception!
      try { 
        formElement0.wrap("32>Vn.+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = new Document("_fc&");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.firstElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("_fc&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.getElementsByIndexLessThan(46);
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("details");
      document0.prepend("details");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      document0.getElementsByAttributeValueStarting("#@Z.Ypx9=e-m?El!c", "Pattern syntax error: ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(", ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("/vi5`7;/26RqBE");
      Element element0 = document0.attr(":p d-%gFAZD6YG}zx'", false);
      assertEquals("/vi5`7;/26RqBE", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell("*}/fXClvnD");
      document0.wholeText();
      assertEquals("*}/fXClvnD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document document0 = new Document("");
      CDataNode cDataNode0 = new CDataNode("5Evx");
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.addClass("");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals("5t9Pdg_>", document0.baseUri());
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Element element0 = new Element("L");
      Map<String, String> map0 = element0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = Document.createShell("*}/fXClvnD");
      document0.text("");
      document0.wholeText();
      assertEquals("*}/fXClvnD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document document0 = Document.createShell("Jf/");
      Element element0 = document0.tagName("Jf/");
      assertEquals(1, element0.childNodeSize());
      assertEquals("Jf/", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.prependText(".");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        element0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Document document0 = Document.createShell("5t9Pdg_>");
      document0.appendText("N 2|jiXi");
      document0.getElementsMatchingText("5t9Pdg_>");
      assertEquals(2, document0.childNodeSize());
  }
}
