/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 00:48:33 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.appendCodePoint(32);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder();
      textNode0.outerHtmlHead(stringBuilder0, 26, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2058);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode0.setParentNode(document0);
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead((Appendable) null, (-2051), document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("^s+");
      document0.title("");
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head>\n  <title></title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      Document document0 = Document.createShell("F-OyP|X<@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.setParentNode(document0);
      TextNode textNode1 = textNode0.splitText(0);
      StringBuilder stringBuilder0 = new StringBuilder();
      textNode1.outerHtmlHead(stringBuilder0, 26, document_OutputSettings0);
      assertEquals("Split offset must not be greater than current text length", stringBuilder0.toString());
      assertEquals(1, textNode1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode("TIf[#yDY8rhp>", "TIf[#yDY8rhp>");
      StringBuilder stringBuilder0 = new StringBuilder(2058);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringBuilder0, 2058, document_OutputSettings1);
      assertEquals("TIf[#yDY8rhp&gt;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      Document document0 = Document.createShell("F-OyP|X<@");
      textNode0.setParentNode(document0);
      TextNode textNode1 = textNode0.splitText(0);
      assertEquals(1, textNode1.siblingIndex());
      
      String string0 = textNode0.toString();
      assertEquals("", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("TIf[#yDY8rhp>", "TIf[#yDY8rhp>");
      // Undeclared exception!
      try { 
        textNode0.splitText(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        textNode0.splitText((-1981));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      TextNode textNode1 = textNode0.splitText(0);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      MockFile mockFile0 = new MockFile("ahq:NK9Ai%+6y9a/hI", "#text");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(mockPrintWriter0, (-1076), document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode("$", "$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail((Appendable) null, (-2050), document_OutputSettings0);
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("^s+");
      assertEquals("^s+", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("1<a(t/pB 1=`E`]{lvR");
      assertEquals("1<a(t/pB 1=`E`]{lvR", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode("$", "$");
      Document document0 = Document.createShell("1<a(t/pB 1=`E`]{lvR");
      textNode0.setParentNode(document0);
      StringBuilder stringBuilder0 = new StringBuilder();
      textNode0.outerHtml((Appendable) stringBuilder0);
      assertEquals("\n$", stringBuilder0.toString());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      String string0 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Split offset must not be greater than current text length", string0);
  }
}
