/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 02:17:47 GMT 2020
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeTraversor_ESTest extends NodeTraversor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult1, nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsContainingText("");
      NodeTraversor.filter(nodeFilter0, elements0);
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      CDataNode cDataNode0 = new CDataNode("A6ilE&%S");
      NodeTraversor.filter(nodeFilter0, (Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult1).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsContainingText("");
      NodeTraversor.filter(nodeFilter0, elements0);
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      NodeTraversor.filter(nodeFilter0, elements0);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = new Document("-[E");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      NodeTraversor.traverse(nodeVisitor0, elements0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NodeTraversor.traverse((NodeVisitor) null, (Node) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      TextNode textNode0 = new TextNode("ih]P:", "4iL6AzVG QL");
      nodeTraversor0.traverse((Node) textNode0);
      assertFalse(textNode0.hasParent());
  }
}
