/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 01:56:15 GMT 2020
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Document document1 = document0.normalise();
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Elements");
      Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Elements elements1 = elements0.clone();
      assertEquals(1, elements1.size());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = Document.createShell("\n");
      Elements elements0 = document0.getElementsContainingText("|*GrGoo6\"+86");
      // Undeclared exception!
      try { 
        elements0.prevAll("\n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '
         // ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.next();
  }
}
