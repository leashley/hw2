/*
 * This file was automatically generated by EvoSuite
 * Wed Feb 12 02:58:04 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokeniserState_ESTest extends TokeniserState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEndTagName;
      CharacterReader characterReader0 = new CharacterReader("AfterAttributeName");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BogusDoctype;
      CharacterReader characterReader0 = new CharacterReader("RawtextLessthanSign");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeSystemKeyword;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 622);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicIdentifier;
      CharacterReader characterReader0 = new CharacterReader("-jS6'-]|:'Fjqx tB)C");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertEquals(0, characterReader0.pos());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_doubleQuoted;
      CharacterReader characterReader0 = new CharacterReader(".3YmW,qk");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_doubleQuoted;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(96);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypePublicIdentifier;
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 230);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(230, 230);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      String string0 = tokeniser0.unescapeEntities(true);
      assertEquals(4, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(5, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypePublicIdentifier;
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 230);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(230, 230);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicKeyword;
      CharacterReader characterReader0 = new CharacterReader("A\"QxuK@SjhWAFZZi");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(4420, 1309);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeName;
      CharacterReader characterReader0 = new CharacterReader("@w{W?");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeName;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 622);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Doctype;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 622);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEnd;
      CharacterReader characterReader0 = new CharacterReader("D$2c>F#$L*xE m0");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1727);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEnd;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertEquals(0, characterReader0.pos());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Comment;
      CharacterReader characterReader0 = new CharacterReader("UTF8");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertEquals(0, characterReader0.pos());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentStart;
      CharacterReader characterReader0 = new CharacterReader("'G*B6");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("'G*B6");
      assertEquals(5, characterReader0.pos());
      assertTrue(boolean0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(5, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(6, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentStart;
      CharacterReader characterReader0 = new CharacterReader("'G*B6");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.MarkupDeclarationOpen;
      StringReader stringReader0 = new StringReader("i$l3iYR,");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 31);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(1951, 31);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_unquoted;
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3559));
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$40", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_unquoted;
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3559));
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$40", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_unquoted;
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3559));
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$40", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_unquoted;
      CharacterReader characterReader0 = new CharacterReader("`");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertEquals(0, characterReader0.pos());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_singleQuoted;
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 48);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(27);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$39", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_singleQuoted;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$39", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_doubleQuoted;
      CharacterReader characterReader0 = new CharacterReader("D$2c>F#$L*xE m0");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$38", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeAttributeValue;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterAttributeName;
      CharacterReader characterReader0 = new CharacterReader("]W6A?");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$36", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("version");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3559));
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedDashDash;
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedDashDash;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(48);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3559));
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedDashDash;
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscaped;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$22", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapeStartDash;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(1863, 1863);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("[T");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$17", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RawtextLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("qIk5}/?RN%S");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertEquals(0, characterReader0.pos());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagName;
      StringReader stringReader0 = new StringReader("$|3ce:E_;,8/4");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      String string0 = characterReader0.consumeTagName();
      assertEquals(12, characterReader0.pos());
      assertEquals("$|3ce:E_;,8", string0);
      assertNotNull(string0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(62, 62);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(12, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(12, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(48);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RcdataLessthanSign;
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 48);
      assertEquals(0, characterReader0.pos());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(27);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.EndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("h`p=i9t_aeO]iK9");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.PLAINTEXT;
      CharacterReader characterReader0 = new CharacterReader("`/'v}Z!Tj6I9");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(2867, 1093);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(12, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(12, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Rcdata;
      CharacterReader characterReader0 = new CharacterReader("CharacterReferenceInRcdata");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1577));
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(26, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Data;
      CharacterReader characterReader0 = new CharacterReader(",\".e_`T8n<t/bDJct]");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(9, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Data;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(1863, 1863);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BogusComment;
      CharacterReader characterReader0 = new CharacterReader("RawtextEndTagOpen");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapeEnd;
      CharacterReader characterReader0 = new CharacterReader("g");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertEquals(0, characterReader0.pos());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedEndTagName;
      CharacterReader characterReader0 = new CharacterReader("");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEndTagOpen;
      ParseErrorList parseErrorList0 = new ParseErrorList(4851, 4851);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, (CharacterReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RawtextEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("#document");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagName;
      StringReader stringReader0 = new StringReader("$|3ce:E_;,8/4");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(62, 62);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }
}
